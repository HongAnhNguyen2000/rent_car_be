#!/bin/bash


NAME="rent_car"

FIRST_ARG="$1"
shift
ARGS="$@"

docker_down () {
    COMPOSE_HTTP_TIMEOUT=512 docker compose down --volumes
}

docker_up () {
    COMPOSE_HTTP_TIMEOUT=512 docker compose up -d
}

help () {
    echo "build             :  build docker instance"
    echo "up                :  up docker instance"
    echo "down              :  down docker inscance"
    echo "restart           :  down then up docker instance"
    echo "bserver           :  run phoenix dev server"
    echo "btest             :  run test"
    echo "fserver           :  run frontend dev server"
    echo "yarn              :  run yarn"
    echo "backend <args>    :  execute random command on backend service, ex: ./exec backend ls"
}

if [ "$FIRST_ARG" == "-h" ]; then
    help
    exit 0
fi

# $TARGET_ENV is environment variable

if [ "$FIRST_ARG" == "backend" ] || [ "$FIRST_ARG" == "db" ]; then
    docker compose exec "$NAME"_"$FIRST_ARG" $ARGS
elif [ "$FIRST_ARG" == "yarn" ]; then
    docker compose exec "$NAME"_backend yarn $ARGS
elif [ "$FIRST_ARG" == "fserver" ]; then
    cd ../frontend
    echo "Copy .env.local.default -> .env"
    cp .env.local.default .env
    yarn start
elif [ "$FIRST_ARG" == "fbuild" ]; then
    cd ../frontend
    echo "Copy .env.$TARGET_ENV.default -> .env"
    cp ".env.$TARGET_ENV.default" .env
    yarn build
elif [ "$FIRST_ARG" == "bserver" ]; then
    docker compose exec "$NAME"_backend yarn nodemon
elif [ "$FIRST_ARG" == "bbuild" ]; then
    export NODE_OPTIONS=--max-old-space-size=8192
    rm -rf build
    docker compose exec "$NAME"_backend yarn build
elif [ "$FIRST_ARG" == "makemigrations" ]; then
    docker compose exec "$NAME"_backend yarn ts-node node_modules/typeorm/cli.js migration:create -n $ARGS -d migrations
elif [ "$FIRST_ARG" == "migrate" ]; then
    docker compose exec "$NAME"_backend yarn ts-node node_modules/typeorm/cli.js migration:run
elif [ "$FIRST_ARG" == "log" ]; then
    docker compose exec "$NAME"_backend tail -f storage/logs/laravel.log
elif [ "$FIRST_ARG" == "up" ]; then
    docker_up
elif [ "$FIRST_ARG" == "down" ]; then
    docker_down
elif [ "$FIRST_ARG" == "restart" ]; then
    docker_down
    docker_up
elif [ "$FIRST_ARG" == "build" ]; then
    docker compose build --no-cache
elif [ "$FIRST_ARG" == "pg_dump" ]; then
    docker compose exec "$NAME"_db pg_dump $ARGS
    # ./exec pg_dump -U username db_name > db.sql
elif [ "$FIRST_ARG" == "bbuild" ]; then
    export NODE_OPTIONS=--max-old-space-size=8192
    rm -rf build
    docker compose exec "$NAME"_backend yarn build
elif [ "$FIRST_ARG" == "clean-db" ]; then
    rm -rf dbdata && mkdir dbdata
    sleep 1
    docker restart "$NAME"_db
    sleep 10
    docker compose exec "$NAME"_backend php artisan migrate
    docker compose exec "$NAME"_backend php artisan app:cmd-sync-all-pems
    docker compose exec "$NAME"_backend php artisan app:cmd-account-seeding
elif [ "$FIRST_ARG" == "btest" ]; then
    if [[ $1 ]]; then
        docker compose exec "$NAME"_backend poetry run python manage.py test $1
    else
        docker compose exec "$NAME"_backend poetry run python manage.py test
    fi
else
    echo "Invalid argument, please use following arguments:"
    echo "-------------------------------------------------"
    help
fi
